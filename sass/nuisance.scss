@import "utils.scss";

$NUISANCE_TYPE_COUNT: 6;
$RECALC_DURATION: custom_field('queue_recalc_anim_duration') + ms;
$NUISANCE_DIR: '../images/nuisance/';

.nuisance {
    /* vertically centering nuisance */
    @include valign;

    /* each .nuisance is fixed size, but the nuisance *
     * image can be bigger than that and overflows    */
    overflow: visible;

    /* width of the queue can change during recalc animation, *
     * so let's rely on the height and use aspect ratio to    *
     * maintain the dimension of nuisance                     */
    height: 100%;

    @for $type from 0 through $NUISANCE_TYPE_COUNT {
        .nuisance-type-#{$type} {
            position: absolute;
            @include valign(-100%, -100%);

            @each $nuisance-style in puyo, tetris, putet {
                &.#{$nuisance-style} {
                    $icon-path: $NUISANCE_DIR + $nuisance-style + '-' + $type + '.png';
                    $standard-size: pngheight($NUISANCE_DIR + $nuisance-style + '-' + $NUISANCE_TYPE_COUNT + '.png');
                    $icon-size: pngheight($icon-path);
                    content: url64($icon-path);
                    height: $icon-size / $standard-size * 100%;
                }
            }
        }
    }

    @for $i from 1 through 6 {
        &:nth-child(#{$i}) { left: calc(100% / 6 * #{$i - 1}); }
    }
}

.queue_wrapper {
    /* leaves room on both sides of the queue *
     * so the icons look better contained     */
    width: 90%;

    @include halign;
    @include valign;
}

.nuisance_effect, #nuisance_queue {
    /* 6 nuisance to be displayed, 1 line, *
     * nuisance icons are always squares   */
    @include aspect_ratio(6, 1);

    /* on recalc animation, the queue resizes,             *
     * this keeps the queue in the center of its container */
    @include halign;

    /* visually vertically centers icons in queue */
    @include valign;

}

@keyframes queue_recalc {
    from { width: 100%; }
    to   { width: 0;    }
}

#nuisance_queue {
    &.animate {
        animation: queue_recalc $RECALC_DURATION alternate 2 linear;
    }
}

.generate {
    width: 100%;
    height: 100%;
    position: absolute;

    .generate_fx {
        $GENERATE_DURATION: 0.8s;
        position: absolute;
        &:before {
            @include valign(-100%, -100%);
            @include halign(-100%, -100%);

            content: "";
            background: radial-gradient(circle, rgba(0,0,0,0.8) 10%, rgba(0,0,0,0) 50%);
        }

        @include valign(-100%, -100%);

        width: calc(100% / 6);
        height: 100%;
        opacity: 0;

        // the clouds are too big as is, but messing with the width of the fx
        // is going to be much more painful to make it do layout the way I want it,
        // so let's just use a transform.
        transform: scale(0.8);

        @for $i from 1 through 6 {
            &:nth-child(#{$i}) { left: calc(100% / 6 * #{$i - 1}); }
        }

        animation: nuisance_generate_cloud_fade #{$GENERATE_DURATION} ease-in;
        @keyframes nuisance_generate_cloud_fade {
            0% { opacity: 0; }
            20% { opacity: 1; }
            50% { opacity: 1; }
            100% { opacity: 0; }
        }

        .cloud {
            * {
                @include pseudo_img($NUISANCE_DIR + "generate_fx/cloud.png");
                position: absolute;
                width: 25%;

                &:nth-of-type(1) { top: 20%; left: 0;   }
                &:nth-of-type(2) { top: 48%; left: 25%; }
                &:nth-of-type(3) { top: 48%; right: 0;  }
                &:nth-of-type(4) { top: 75%; left: 25%; }
                &:nth-of-type(5) { top: 0;   left: 45%; }
                &:nth-of-type(6) { top: 60%; left: 45%; }

                &.dark {
                    opacity: 0.7;
                    animation: nuisance_generate_dark_cloud $GENERATE_DURATION linear,
                               nuisance_generate_cloud_grow $GENERATE_DURATION linear;

                    @keyframes nuisance_generate_dark_cloud {
                        0%   { filter: brightness(-30%); }
                        100%   { filter: brightness(40%); }
                    }
                }

                animation: nuisance_generate_cloud_grow $GENERATE_DURATION linear;

                @keyframes nuisance_generate_cloud_grow {
                    0%   { transform: scale(1);   }
                    100% { transform: scale(4); }
                }

                transform: rotate(-45deg);
                &:before {
                    animation: nuisance_generate_cloud_rotate 2s linear infinite;
                    @keyframes nuisance_generate_cloud_rotate {
                        0%   { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                }
            }
        }

        .fire * {
            @include pseudo_img($NUISANCE_DIR + "generate_fx/fire.png", "auto 100%", 32, 54);
            position: absolute;
            width: 30%;

            &:nth-of-type(1) { 
                top: -10%; right: 0;
                animation: nuisance_generate_fire_movement_1 2s linear infinite;
                @keyframes nuisance_generate_fire_movement_1 {
                    0%   { transform: translateX(0) translateY(0); }
                    25%  { transform: translateX(2vw) translateY(2vh); }
                    50%  { transform: translateX(0vw) translateY(4vh); }
                    75%  { transform: translateX(-2vw) translateY(2vh); }
                    100% { transform: translateX(0) translateY(0); }
                }
            }

            &:nth-of-type(2) {
                top: 35%; left: 15%;
                animation: nuisance_generate_fire_movement_2 2s linear infinite;
                @keyframes nuisance_generate_fire_movement_2 {
                    0%   { transform: translateX(0) translateY(0); }
                    25%  { transform: translateX(2vw) translateY(2vh); }
                    50%  { transform: translateX(4vw) translateY(0vh); }
                    75%  { transform: translateX(2vw) translateY(-2vh); }
                    100% { transform: translateX(0) translateY(0); }
                }
            }

            &:before {
                animation: nuisance_generate_fire_state 0.2s steps(2, end) infinite;

                @keyframes nuisance_generate_fire_state {
                    0% { background-position: 0% top; }
                    100% { background-position: 200% top; }
                }
            }
        }
    }
}
